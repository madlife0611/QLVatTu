 Thao tác trên SSMS:
Tạo login mới với SQL Server authentication-> nhập tên login và passw
chuyển sang Sever Roles tích vào public và sysadmin -> OK
Ngắt kết nối-> kết nối SQL Server authentication với tài khoản vừa tạo
Nếu k connect được thì fix lỗi như sau:
- Đăng nhập lại windows authen-> Property vào cái tên server->security->check SQL Server and Windows Authen mode
- Chuột phải my computer-> computer management->Services and Applications
					->Services->SQL Server(SQLEXPRESS)->restart
- Sau đấy vào kết nối csdl lại

Thao tác kết nối IIS -> check xem IIS có trên máy chưa
-Seacrh Turn Windows Feature on or off
-Tích vào cái Internet Information Services 
Ở WWW tích hết file trong cái Application Development Features

Thao tác với IIS
-Add Application Pools -> nhập tên -> mở Application Pools
-rightCLick vào cái vừa tạo-> advanced settings -> đổi Identity thành Local System
-rightCLick vào Default Web Site-> add Application-> nhập tên, đường dẫn file
-Authentication->Open Feature->edit Anonymous Authen->Application pool identity

Thao tác tạo web api trên Visual
lúc đặt tên proj nhớ tích "place solution and project in the same directory"
Chọn Empty -> Web API và Configure for HTTPS -> ok
View->SQL server object Explorer -> add csdl mới
copy tên server-> chọn SQL server authen ở phần authentication
nhập user name, pass vừa tạo ở trên-> chọn database name

Tại Models thêm class mới, gõ Entity trên thanh tìm kiếm:
Chọn ADO.NET Entity Data Model->Code First from database
->connect lại sql-> select tên db->ok
chọn yes,include the sensitive data.....->next
-> tích tất cả object trong Tables->Finish

Thêm code vào file Global.asax.cs như sau
GlobalConfiguration.Configuration.Formatters.JsonFormatter.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore;
GlobalConfiguration.Configuration.Formatters.Remove(GlobalConfiguration.Configuration.Formatters.XmlFormatter);

Tạo controller mới->Web API->Web API 2 Controller - Empty
thêm code như sau:
	  Model1 db = new Model1();

        [HttpGet]
        [Route("api/th/ds")]
        public List<sinhvien> ds()
        {
            return db.sinhviens.ToList();
        }
        [HttpGet]
        [Route("api/th/dstheolop")]
        public List<sinhvien> dstheolop(int malop)
        {
            return db.sinhviens.Where(sv => sv.malop == malop).ToList();
        }
        [HttpGet]
        [Route("api/th/timsv")]
        public sinhvien timsv(int masv)
        {
            return db.sinhviens.SingleOrDefault(sv => sv.masv == masv);
        }
        [HttpPost]
        [Route("api/th/themsv")]
        public bool themsv([FromBody] sinhvien s)
        {
            try 
            {
                db.sinhviens.Add(s);
                db.SaveChanges();
                return true;
            }
            catch (Exception ex) {
                Console.WriteLine("Lỗi" + ex.Message);            
                return false;
            }
        }
        [HttpPut]
        [Route("api/th/suasv")]
        public bool suasv([FromBody] sinhvien s)
        {
            try
            {
                sinhvien sv = db.sinhviens.SingleOrDefault(x => x.masv == s.masv);
                sv.hoten = s.hoten;
                sv.diachi = s.diachi;
                sv.anh = s.anh;
                sv.lophoc = s.lophoc;
                sv.malop = s.malop;
                db.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine("Lỗi" + ex.Message);
                return false;
            }
        }

        [HttpDelete]
        [Route("api/th/xoasv")]
        public bool xoasv(int masv)
        {
            sinhvien sv = db.sinhviens.SingleOrDefault(s => s.masv == masv);
            if(sv != null)
            {
                db.sinhviens.Remove(sv);
                db.SaveChanges();
                return true;
            }
            return false;
        }

        [HttpGet]
        [Route("api/th/dslop")]
        public List<lophoc> dslop()
        {
            return db.lophocs.ToList();
        }
////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Tạo winform như bình thường: đặt tên các textbox các thứ
	Chuột phải vào cái form->proberty->CHuyển qua cái sét-> double click vào dòng Load ở đoạn Behavior


	public Form1()
        {
            InitializeComponent();
        }


        private void Hienthi()
        {
            string link = "http://localhost/huchi/api/th/ds";
            HttpWebRequest request = HttpWebRequest.CreateHttp(link);
            WebResponse response= request.GetResponse();    
            DataContractJsonSerializer js = new DataContractJsonSerializer(typeof(Sinhvien[]));
            object data = js.ReadObject(response.GetResponseStream());
            Sinhvien[] ds = (Sinhvien[])data;
            dataGridView1.DataSource= ds;
            Dslop();
        }
        private void Dslop()
        {
            string link = "http://localhost/huchi/api/th/dslop";
            HttpWebRequest request = HttpWebRequest.CreateHttp(link);
            WebResponse response = request.GetResponse();
            DataContractJsonSerializer js = new DataContractJsonSerializer(typeof(Lophoc[]));
            object data = js.ReadObject(response.GetResponseStream());
            Lophoc[] ds = (Lophoc[])data;
            cbLop.DataSource = ds;
            cbLop.ValueMember= "malop";
            cbLop.DisplayMember= "tenlop";
        }

        private void clearBox()
        {
            txtMasv.Clear();
            txtHoten.Clear();
            txtDiachi.Clear();
            txtDth.Clear();
            cbLop.Select(0,0);
            txtAnh.Clear();
            txtMasv.Focus();
        }

        private void btnDs_Click(object sender, EventArgs e)
        {
            Hienthi();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            Hienthi();
        }

        private void btnTim_Click(object sender, EventArgs e)
        {
            string str = string.Format("?masv={0}",txtMasv.Text);
            string link = "http://localhost/data/api/th/timsv" + str;
            HttpWebRequest request = HttpWebRequest.CreateHttp(link);
            WebResponse response = request.GetResponse();
            DataContractJsonSerializer js = new DataContractJsonSerializer(typeof(Sinhvien));
            object data = js.ReadObject(response.GetResponseStream());
            Sinhvien sv = (Sinhvien)data;
            if(sv != null)
            {
                txtHoten.Text = sv.hoten ;
                txtDiachi.Text = sv.diachi ;
                txtDth.Text = sv.dienthoai;
                cbLop.SelectedValue = sv.malop;
                txtAnh.Text = sv.anh;
            }
            else
            {
                MessageBox.Show("Không tồn tại sinh viên có mã: " + txtMasv.Text);
            }
        }

        private void btnThem_Click(object sender, EventArgs e)
        {
            string link = "http://localhost/data/api/th/themsv";
            var client = new WebClient();
            var sv = new NameValueCollection();
            sv["hoten"] = txtHoten.Text;
            sv["diachi"] = txtDiachi.Text;
            sv["dienthoai"] = txtDth.Text;
            sv["malop"] = cbLop.SelectedValue.ToString(); 
            sv["anh"] = txtAnh.Text;
            var response = client.UploadValues(link, sv);
            string msg = Encoding.UTF8.GetString(response);
            MessageBox.Show("Đã thêm "+ msg);
            Hienthi();
            clearBox();
        }

        private void btnSua_Click(object sender, EventArgs e)
        {
            string link = "http://localhost/data/api/th/suasv";
            var client = new WebClient();
            var sv = new NameValueCollection();
            sv["hoten"] = txtHoten.Text;
            sv["diachi"] = txtDiachi.Text;
            sv["dienthoai"] = txtDth.Text;
            sv["malop"] = cbLop.SelectedValue.ToString();
            sv["anh"] = txtAnh.Text;
            sv["masv"] = txtMasv.Text;
            var response = client.UploadValues(link, "PUT",sv);
            string msg = Encoding.UTF8.GetString(response);
            MessageBox.Show("Đã sửa " + msg);
            Hienthi();
            clearBox();
        }

        private void btnXoa_Click(object sender, EventArgs e)
        {
            string str = string.Format("?masv={0}", txtMasv.Text);
            string link = "http://localhost/data/api/th/xoasv" + str;
            WebRequest request = WebRequest.CreateHttp(link);
            request.Method = "Delete";
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            if(response.StatusCode == HttpStatusCode.OK)
            {
                MessageBox.Show("Đã xoá: " + txtMasv.Text);
                Hienthi();
            }
            else
            {
                MessageBox.Show("Lỗi khi xoá: " + txtMasv.Text); 

            }
        }

        private void btnClear_Click(object sender, EventArgs e)
        {
            clearBox();   
        }